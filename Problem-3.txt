//https://leetcode.com/problems/spiral-matrix/
// Time Complexity :O(m*n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Three line explanation of solution in plain english

// Your code here along with comments explaining your approach


class Solution {
    
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix == null || matrix.length ==0) return new ArrayList<>();
      int m = matrix.length;
      int n = matrix[0].length;
        
       int left = 0;
       int right = n-1;
       int top =0;
       int bottom =m-1; 
        List<Integer> result = new ArrayList<>();
        
        while(left<=right && top<=bottom)
        {
            //left to right
            for(int i = left ; i<=right;i++)
            {
                result.add(matrix[top][i]);
            }
            top++;
            //top to down
            
            
            for(int i =top;i<=bottom;i++)
            {
                result.add(matrix[i][right]);
            }
            right--;
            
            //right to left
           if(left<=right && top<=bottom){
            for(int i = right;i>=left;i--)
            {
                result.add(matrix[bottom][i]);
            }
             bottom--;
        }
            //bottom to top
             if(left<=right && top<=bottom){
            for(int i =bottom;i>=top;i--)
            {
                result.add(matrix[i][left]);
            }
            left++;
        }
        }
        
        return result;
    }
}