//Time: O(m*n) 
//Space: O(1)
//Executed: yes
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result=new ArrayList<>();
        if(matrix==null || matrix.length==0)
         return result;
        int m=matrix.length;
        int n=matrix[0].length;
        int left=0,bottom=m-1;
        int right=n-1,top=0;
        while(left<=right &&top<=bottom )
        {
            //from top most row left to right direction
            for(int i=left;i<=right;i++)
            {
                result.add(matrix[top][i]);
            }
            top++;
            //from top to bottom right most column
            for(int i=top;i<=bottom;i++)
            {
                result.add(matrix[i][right]);
            }
            right--;

            //check condition because we are increasing top abv and it should not go beyond bottom
            if(top<=bottom){
                //bottom row
             for(int i=right;i>=left;i--)
            {
                result.add(matrix[bottom][i]);
            }
                 bottom--;
            }
            if(left <=right){
               for(int i=bottom;i>=top;i--)
            {
                result.add(matrix[i][left]);
            }
                left++;
            }
        }
        return result;
    }
}
