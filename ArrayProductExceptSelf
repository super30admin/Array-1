// Time Complexity : O(n) n is the length of the array
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes

// Approach
//First creating an array of prefix product and then moving from the right side of the array we parallely calculating suffixproduct and storing it in a varible and will be multiplying with the prefix product and the new product is updating in the same array of prefixproduct.

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] prefixProduct = new int[nums.length];
        int suffixProduct =1;
        prefixProduct[0] = 1;
        int a;
        
        //Prefixproduct
        for(int i=1;i<nums.length;i++){ 
            prefixProduct[i] = prefixProduct[i-1]*nums[i-1];
        }
        
        //suffixproduct
        for(int i=nums.length-2;i>=0;i--){
            suffixProduct = suffixProduct * nums[i+1];
            a = suffixProduct*prefixProduct[i];
            prefixProduct[i] = a;
        }
        return prefixProduct;
    }
}
