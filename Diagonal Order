//Time : O(m*n)
//Space: O(m*n)
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        //base case checks if matrix is empty
        if(matrix==null || matrix.length==0) return new int[]{};
        int m=matrix.length;
        int n=matrix[0].length;
        int[] result=new int[m*n];
        int c=0;
        int r=0;
        int i=0;
        int dir=1;
        while(i<m*n)
        {
            result[i]=matrix[r][c];
            if(dir==1)
            {
              
                //we need to first check if column has reached till last because in second else if we are increasing column, that wwould lead to array index out of bound 
                 if(c==n-1)
              {
                  r++;
                  dir=-1;
              }
                 else if(r==0)
                {
                    c++;
                    dir=-1;
                }
                else
                {
                    r--;
                    c++;
                }
            }
            else
            {
                //if we are increating rows first check if rows has been reached to last row
                if(r==m-1)
                {
                    c++;
                    dir=1;
                }
                else if(c==0)
                {
                    r++;
                    dir=1;
                }
                 
                else
                {
                    r++;
                    c--; 
                }
            }
            i++;
            
        }
        return result;
}
}
