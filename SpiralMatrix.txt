class Solution{
	public List<Integer> spiralOrder(int[][]matrix){
		
		if(matrix == null || matrix.length == 0 || matrix[0].length == 0)
			return new ArrayList<>();
			
		List<Integer> output = new ArrayList<>();
		
		int n = matrix.length;
		int m = matrix[0].length;
		
		int top = 0;
		int bottom = n - 1;
		int left = 0;
		int right = m - 1;
		
		//
		while (top<= bottom && left<= right){
			//1
			for(int x = left; x <= right; x++){
				output.add(matrix[top][x]);
			}
			top++;
			
			// 2
			for(int x = top; x<= bottom; x++){
				output.add(matrix[x][right]);
			}
			right--;
			
			//3
			if(top <= bottom && left<= right ){
			
				for(int x = right; x >= left ; x--){
				output.add(matrix[bottom][x]);
				}
				
				bottom--;
				
				//4
				for(int x = bottom; x >= top ; x--){
					output.add(matrix[x][left]);
				}
				
				left++;
			}
			
			
		}
		
		return output;
	}
}

// TC = O(n*m)
// SC = O(1)   