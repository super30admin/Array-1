
// Time Complexity : o(nm)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
* Keep 4 boundary variables [left, right, top, bottom] to keep track till where we need to traverse.
* Traverse as follows checking the boundary conditions
*   1. left to right
*   2. top to bottom
*   3. right to left
*   4. bottom to top
* */

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();

        int n = matrix.length;
        int m = matrix[0].length;
        int left = 0;
        int right = m -1;
        int top = 0;
        int bottom = n-1;

        while(top<=bottom && left<=right){
            for(int i = left; i<= right && top<=bottom; i++){
                result.add(matrix[top][i]);
            }

            top++;

            for(int i = top; i<= bottom &&  left<=right; i++){
                result.add(matrix[i][right]);
            }

            right--;

            for(int i = right; i>= left && top<=bottom; i--){
                result.add(matrix[bottom][i]);
            }

            bottom--;

            for(int i = bottom; i>= top && left<=right; i--){
                result.add(matrix[i][left]);
            }

            left++;


        }

        return result;
    }
}