class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix == null || matrix.length==0 || matrix[0].length ==0){
            return new ArrayList<>();
        }
        List<Integer> list = new ArrayList<>();
        int n=matrix.length;
        int m = matrix[0].length;
        int top = 0;
        int left = 0;
        int bottom = n-1;
        int right = m-1;
        
        while(top <=bottom && left<=right){
            // top: left to right
            for(int i=left;i<=right;i++){
                list.add(matrix[top][i]);
            }
            top +=1;
            //right: top to bottom
            for(int i=top;i<=bottom;i++){
                list.add(matrix[i][right]);
            }
            right -=1;
            if(top<=bottom){
            //bottom : right to left
                for(int i=right;i>=left;i--){
                    list.add(matrix[bottom][i]);
                }
            bottom -=1;
            }
            //bottom : left to right
            if(left <= right){
                for(int i=bottom;i>=top;i--){
                    list.add(matrix[i][left]);
                }
                left +=1;
            }
        }
        return list;
    }
}

//time : O(n)
//space : O(1)
