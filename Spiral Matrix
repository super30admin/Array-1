// Time Complexity : O(m*n)
// Space Complexity : O(1) **
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to look up Video for Hint.


// Your code here along with comments explaining your approach: Idea is to maintain 4 variable as top,bottom,left,right && check condition before each traversal 
// Main Loop check may be violated while internal traversal --> left++ will cross right

SOLUTION:

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        if(matrix==null || matrix.length==0){
            return new ArrayList<>();
        }
        List<Integer> result = new ArrayList<>();
        int top = 0;
        int bottom = matrix.length - 1;
        int left = 0;
        int right = matrix[0].length - 1;
        
        while(top <= bottom && left<=right){
            
            if(top<=bottom && left<=right){
                for(int i = left; i <= right; i++){
                    result.add(matrix[top][i]);
                }
            }
            // left++;
            top++;
            
            if(top<=bottom && left<=right){
                for(int i = top ; i <= bottom ; i++){
                    result.add(matrix[i][right]);
                }
            }
            // top++;
            right--;
            
            if(top<=bottom && left<=right){
                for(int i = right ; i >= left ; i--){
                    result.add(matrix[bottom][i]);
                }
            }
            // right--;
            bottom--;
            
            if(top<=bottom && left<=right){
                for(int i = bottom; i >= top ; i--){
                    result.add(matrix[i][left]);
                }
            }
            // bottom--;
            left++;
            
                
        }
        
        return result;
            
    }
}

