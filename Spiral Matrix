#time complexity: O(m*n)
#space complexity: O(1)
#did it run on leetcode: yes
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m,n = len(matrix), len(matrix[0])
        left,top = 0,0
        right,bottom = n-1, m-1
        li = []
        while(left<=right and top<=bottom):
            for j in range(left,right+1):  #top
                li.append(matrix[top][j])
            top+=1
            if left<=right and top<=bottom:
                for i in range(top,bottom+1):  #right col
                    li.append(matrix[i][right])
            right-=1
            if left<=right and top<=bottom:
                for j in range(right,left-1, -1):   #bottom
                    li.append(matrix[bottom][j])
            bottom-=1
            if left<=right and top<=bottom:
                for i in range(bottom, top-1, -1):  #left
                    li.append(matrix[i][left])
            left+=1
        return li



        
