class Solution {
public:
    //Time Complexity -->O(m * n)
    // Space Complexity -->O(1)
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
       vector<int> result;
       int  m = matrix.size(); // Num of rows
       int  n = matrix[0].size(); // Num of coulmns
       int top = 0;
       int bottom = m-1;
       int left = 0;
       int right = n-1;
        while(top <= bottom && left <= right){
            if(top <= bottom){
                for(int i = left; i<= right; i++){
                result.push_back(matrix[top][i]);
            }
            top++;
            }
            if(left <= right){
                 for(int i = top; i<= bottom ; i++){
                result.push_back(matrix[i][right]);
            }
            right--;
            }
            if(top <= bottom){
                 for(int i =right ; i>= left ;i--){
                result.push_back(matrix[bottom][i]);
            }
            bottom--;
            }
            if(left <= right){
                for(int i = bottom; i >= top; i--){
                result.push_back(matrix[i][left]);
            }
            left++; 
            }        
        }
     return result;
    }
};
