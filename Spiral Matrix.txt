Time Complexity = O(mxn)
Space Complexity = O(1)

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if matrix == None or len(matrix) == 0:
            return []
        
        m = len(matrix)
        n = len(matrix[0])
        top = 0
        bottom = m-1
        left = 0
        right = n-1
        result = []
        while (top <=bottom and left <= right):
            #iterate on top row
            if (top <=bottom and left <= right):
                for j in range(left,right+1):
                    result.append(matrix[top][j])
                top = top + 1
                
            #iterate the right column
            if (top <=bottom and left <= right):
                for i in range(top, bottom+1):
                    result.append(matrix[i][right])
                right = right - 1     
                
            #iterate the bottom row
            if (top <=bottom and left <= right):
                for j in range(right, left-1, -1):
                    result.append(matrix[bottom][j])
                bottom = bottom -1
                     
            #iterate left column
            if (top <=bottom and left <= right):
                for i in range(bottom, top-1, -1):
                    result.append(matrix[i][left])
                left = left + 1
                        
        return result