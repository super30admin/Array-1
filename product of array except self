// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english: create an array on nums length. do a first pass of array and multiply every thing to left of number excluding it. do a backward pass multiplying everthing to right of number excluding it. then multiply all them together.
// Your code here along with comments explaining your approach

class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums == null || nums.length == 0) return new int[0];
        int [] ret = new int [nums.length];
        //foward pass
        ret [0] = 1;
        int temp = 1;
        for(int i = 1; i < nums.length; i++){
            temp = temp * nums[i-1];
            ret[i] = temp;
        }
        temp = 1;
        //backwards pass
        for(int i = nums.length - 2; i >= 0 ; i--){
            temp = temp * nums[i + 1];
            ret[i] = ret[i] * temp;
        }
        return ret;
    }
}