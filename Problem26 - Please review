 // Time Complexity :O(Nâ‹…M) considering the array has N rows and M columns
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :

class Solution {
    func findDiagonalOrder(_ matrix: [[Int]]) -> [Int] {
        let m = matrix.count
        if m < 1 {
            return []
        }
        let n = matrix[0].count
        var result: [Int] = []
        let maxDiagonals = m + n - 1
        let directions = [ [-1, 1], [1, -1] ]
        for diagonal in 0..<maxDiagonals {
            var i = diagonal % 2 == 0 ? min( m - 1, diagonal) : max( 0, diagonal + 1 - n )
            var j = diagonal % 2 == 0 ? max( 0, diagonal + 1 - m ) : min( n - 1, diagonal )
            while i >= 0 && j >= 0 && i < m && j < n {
                result.append( matrix[i][j] )
                i += directions[diagonal % 2][0]
                j += directions[diagonal % 2][1]
            }
        }
        return result
    }
}
 
