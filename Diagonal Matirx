//Time Complexity: O(n*m)
  // Space Complexity: O(m*n) 

class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        if(matrix.length==0)
            return new int[0];
        int rowLen = matrix.length;
        int colLen = matrix[0].length;
        
        int r =0;
        int c=0;
        
        int result [] = new int[colLen*rowLen];
        
        for(int i =0 ; i<colLen*rowLen ; i++)
        {
            result[i] = matrix[r][c];
            
            if((r+c)%2==0)
            {
            //Remember to check for c/r=m-1 condition first and then r==0 as r++ can help skip the other condition
            
                if(c==colLen-1) r++;
                else if(r==0)   c++;
                    else
                    {
                        r--;
                        c++;
                    }
            }
                else
                {
                    if(r==rowLen-1) c++;
                        else if(c==0) r++;
                            else
                            {
                                r++;
                                c--;
                            }
                }
            }
        return result;
        }
    
    }
