// Time Complexity :O(n)
// Space Complexity :O(n) result
// Did this code successfully run on Leetcode : yes
// Three line explanation of solution in plain english
to come up with O(n) solution
// Your code here along with comments explaining your approach
class Solution {
    public int[] productExceptSelf(int[] nums) {
        //if(nums==null || nums.length==0)
          //  return;
        int rp =1;
    
        int result[] = new int[nums.length];
        result[0] = rp;
        for(int i=1; i<nums.length; i++)
        {
            result[i] = rp * nums[i-1];
            rp = rp * nums[i-1];
        }
        
        rp =1;
        int right[] = new int[nums.length];
        result[nums.length-1] = rp *  result[nums.length-1];
        for(int i= nums.length - 2; i>=0; i-- )
        {
           result[i] = result[i]*rp * nums[i+1];
            rp = rp * nums[i+1];
        }
        
        return result;
    }
}
