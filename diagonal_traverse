// Time Complexity : O(M * N) where M is the number of rows and N is the number of cols
// Space complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// observing how the rows and cols change when the dir changes

class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int m = mat.size();
        int n = mat[0].size();
        vector<int> res(m * n);
        int r = 0, c = 0, dir = 1;
        for(int i = 0; i < res.size(); i++) {
            res[i] = mat[r][c];

            // up
            if(dir == 1) {
                if(r == 0 && c != n - 1) {
                    dir = -1;
                    c++;
                } else if(c == n - 1) {
                    dir = -1;
                    r++;
                } else {
                    r--, c++;
                }
            } else {   // down
                if(dir == -1) {
                    if(c == 0 && r != m - 1) {
                        dir = 1;
                        r++;
                    } else if(r == m - 1) {
                        dir = 1;
                        c++;
                    } else {
                        r++, c--;
                    }
                }
            }
        }
        return res;
    }
};