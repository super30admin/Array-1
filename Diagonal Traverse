// Time Complexity : O(m*n)
// Space Complexity : O(1) **
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to look up Video for Hint.


// Your code here along with comments explaining your approach: Idea is to have direction pointer(indicates up & down) and handle the contraints based on treversal type: 
// Eg: for up dir i--,j++ --> Constraints : i==0 && j==n -1 and Vice-versa

SOLUTION:

class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        if(matrix==null || matrix.length==0){
            return new int[0];
        }

        int m = matrix.length ;
        int n = matrix[0].length ;
        int result[] = new int[m*n];

        int dir = 1;
        int index = 0;
        int i=0;
        int j=0;
        while(index <= result.length-1){
               result[index] = matrix[i][j]; 
                //Up
                if(dir==1){
                    if(j==n-1){
                        dir = -1;
                        i++;
                    }else if(i==0){
                        dir = -1;
                        j++;
                    }else{
                        i--;
                        j++;
                    }
                }
                
                else{
                    if(i==m-1){
                        dir = 1;
                        j++;
                    }else if(j==0){
                        dir = 1;
                        i++;
                    }else{
                        i++;
                        j--;
                    }
                }
                index++;
            }
        
        
        return result;
    }
}
