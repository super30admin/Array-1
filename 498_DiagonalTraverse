// Time Complexity : O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : Yes
// Three line explanation of solution in plain english: Divide the problem into 2 direction ie. up and down 

// Your code here along with comments explaining your approach
class Solution {
    public int[] findDiagonalOrder(int[][] mat) {
        if(mat == null || mat.length == 0)
        {
            return new int [] {};
        }
        int m = mat.length; 
        int n=mat [0].length;
        int result[] = new int [m*n];
        int r=0,c=0;
        
        int dir=1; //up
        
        for(int i = 0; i < m*n; i++)
        {
            result[i] = mat[r][c];
            
            if(dir == 1)
            {
                  if(c == n-1)
                    {
                        r++;
                        dir = -1;
                    }
                else if ( r == 0)
                    {
                        c++;
                        dir = -1;
                    }
                    else
                    {
                        r--;
                        c++;
                    }


            }
            else
            {
                if(r == m-1)
                    {
                        c++;
                        dir = 1;
                    }
                else if ( c == 0)
                    {
                        r++;
                        dir = 1;
                    }
                    else
                    {
                        r++;
                        c--;
                    }
                
            }
        }
        return result;
    }
}
