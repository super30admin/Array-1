// Time Complexity :O(n+n) = O(n) n is the size of the array
// Space Complexity :O(n)
// Did this code successfully run on Leetcode : Yes

/* first going from left to right(left pass) where we multiply all the number previous to it in array and in second pass from right to left where all the number on right are multiplied*/

class Solution {
    public int[] productExceptSelf(int[] nums) {
     
     /* edge case*/
     if(nums == null || nums.length == 0) return nums;
     /* length of array */ 
     int n = nums.length;
     /*new array to store result*/
     int[] r = new int[n];
     r[0] = 1;

     /*left pass to multiply the numbers to the left*/
     for(int i = 1; i<n;i++)
            r[i]=r[i-1]*nums[i-1]; // multiply number left to it and result of all the number previous to it

     int   right = 1;
     
     /*right pass to multiply numbers on right */
     for(int j =n-1;j>=0;j--){
            r[j] *= right;     // muliplication of all the numbers to its right
            right *=nums[j];   // multiply current index number and store in result
     }
        
     return r; // return the array
    }
    
}