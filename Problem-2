
Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.

Example:

Input:

[

[ 1, 2, 3 ],

[ 4, 5, 6 ],

[ 7, 8, 9 ]

]

Output: [1,2,4,7,5,3,6,8,9]

Answer:

// Time Complexity : O(m*n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :yes
// Three line explanation of solution in plain english

class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int n = mat.size();
        int m = mat[0].size();
        vector<int> result;

        int row = 0;
        int col = 0; 
        bool dir = true;
        for(int i = 0; i < (m*n); i++) {
            result.push_back(mat[row][col]);
            if (dir) {
                if ((row == 0) && (col != m-1)) {
                    col++;
                    dir = false;
                } else if(col == m-1) {
                    row++;
                    dir = false;
                } else {
                    row--; col++; 
                }
            } else {
                if((col == 0 ) && (row != n-1)) {
                    row++;
                    dir = true;
                } else if (row == n-1) {
                    col++;
                    dir = true;
                } else {
                    row++; col--;
                }
            }
        }
        return result;
    }
};
