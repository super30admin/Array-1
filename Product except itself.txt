Time Complexity = O(n)
Space Complexity = O(1)

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        if nums == None or len(nums) == 0:
            return []
        
        result = [None] * len(nums)
        result[0] = 1
        rp = 1
        #left pass [1,1,2,6]
        for i in range(1,len(nums)):
            rp = rp * nums[i-1]
            result[i] = rp
        
        rp = 1
        for i in range(len(nums)-2,-1,-1):
            rp = rp * nums[i+1]
            result[i] = result[i]*rp
            
            
        
        return result