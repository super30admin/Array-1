// Time Complexity :O(n)
// Space Complexity :O(n)
// Did this code successfully run on Leetcode : Yes

class Solution {
    func spiralOrder(_ matrix: [[Int]]) -> [Int] {
        
        var res = [Int]()
        
        guard matrix.count > 0 else { return res }
        
        var top = 0
        var bottom = matrix.count - 1
        var left = 0
        var right = matrix[0].count - 1
        
        var direction = "right"
        
        while top <= bottom && left <= right {
            if direction == "right" {
                for i in left...right {
                    res.append(matrix[top][i])
                }
                direction = "down"
                top += 1
            } else if direction == "down" {
                for i in top...bottom {
                    res.append(matrix[i][right])
                }
                direction = "left"
                right -= 1
            } else if direction == "left" {
                for i in (left...right).reversed() {
                    res.append(matrix[bottom][i])
                }
                direction = "up"
                bottom -= 1
            } else if direction == "up" {
                for i in (top...bottom).reversed() {
                    res.append(matrix[i][left])
                }
                direction = "right"
                left += 1
            }
        }
        return res
    }
}
