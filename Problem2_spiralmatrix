'''
Time Complexity: O(mn)
Space Complexity : O(1)
'''
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        m,n = len(matrix) , len(matrix[0])
        left = 0
        right = n - 1
        ceiling = 0
        floor = m - 1
        result = list()
        while (left <= right and ceiling <= floor):
            for i in range(left, right+1):
                result.append(matrix[ceiling][i])
            ceiling += 1
            if (left <= right and ceiling <= floor):
                for i in range(ceiling , floor+1):
                    result.append(matrix[i][right])
            right -= 1
            if (left <= right and ceiling <= floor):
                for i in range(right , left - 1 , -1):
                    result.append(matrix[floor][i])
            floor -= 1
            if (left <= right and ceiling <= floor):
                for i in range(floor , ceiling - 1 , -1):
                    result.append(matrix[i][left])
            left += 1
        return result
