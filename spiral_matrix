// Time Complexity : O(M * N) where M is the no. of rows and N is the no. of cols
// Space complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// 4 pointers - left and right for cols, top and bottom for rows
// shift the pointers according to the spiral order

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> res;
        int left = 0, right = n - 1, top = 0, bottom = m - 1;
       
        while(top <= bottom && left <= right) {
            
            // i == top
            for(int j = left; j <= right; j++) {
                res.push_back(matrix[top][j]);
            }
            top++;

            // j == right
            for(int i = top; i <= bottom; i++) {
                res.push_back(matrix[i][right]);
            }
            right--;

            // i == bottom
            if(top <= bottom) {
                for(int j = right; j >= left; j--) {
                    res.push_back(matrix[bottom][j]);
                }
                bottom--;
            }

            // j == left
            if(left <= right) {
                for(int i = bottom; i >= top; i--) {
                    res.push_back(matrix[i][left]);
                }
                left++;
            }

        }
        return res;
    }
};