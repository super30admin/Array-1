// TC: O(m*n), SP: O(1)
// for genuine condition when direction is upwards: (row-1, col+1) ; downwards: (row+1, col-1)
// when we hit the boundaries: there will be two seperate cases,
//if direction is upwards => last column or not ? if last col, increment the row only else increment the col only
// direction is downwards => last row or not? if last row, then incrsment the col only else increment the row only 
class Solution {
    public int[] findDiagonalOrder(int[][] matrix) {
        if(matrix.length == 0 || matrix == null || matrix[0].length == 0) return new int[0];
        int direction = 1;
        int rows = matrix.length;
        int cols = matrix[0].length;
        int row = 0;
        int col = 0;
       int[] result = new int[rows*cols];
        int r = 0;
       
        while(row < rows && col < cols){
                result[r++] = matrix[row][col];
                int new_row = row + (direction == 1? -1 : 1);
                int new_col = col + (direction == 1? 1: -1);
        
        if(new_row < 0 || new_col < 0 || new_row == rows || new_col == cols){
            
          if(direction == 1){
              row += (col == cols-1? 1: 0);
              col += (col < cols-1? 1 : 0);
              
          }else{
              col += (row == rows-1? 1: 0);
              row += (row < rows-1? 1: 0);
          }
            direction = 1-direction;
        }
       else{ 
            row = new_row;
            col = new_col;
       }
    
  }
    return result;    
    }
}
