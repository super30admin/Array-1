//tc:O(m*n)
//sc:O(1)
//passed on leetcode:yes
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        if (matrix == null || matrix.length ==0) return result;
        int m = matrix.length; int n= matrix[0].length;
        int top = 0; int bottom = m-1;
        int left = 0; int right = n-1;
        
        while (left <= right && top <=bottom) {
            //toprow
            if(left <= right && top <=bottom) {
            for (int j=top;j<=right;j++) {
                result.add(matrix[top][j]);
            }
            }
            top++;
            
            //rightcolumn
            if(left <= right && top <=bottom) {
            for (int i=top;i<=bottom;i++) {
                result.add(matrix[i][right]);
            }
            }
            right--;
            //bottom
            if(left <= right && top <=bottom) {
            for(int j = right; j>=left; j--) {
                result.add(matrix[bottom][j]);
            }
            }
            bottom--;
            //left
            if(left <= right && top <=bottom) {
            for (int i=bottom; i>=top;i--) {
                result.add(matrix[i][left]);
            }
            }
            left++;
        }
        return result;
    }
}
